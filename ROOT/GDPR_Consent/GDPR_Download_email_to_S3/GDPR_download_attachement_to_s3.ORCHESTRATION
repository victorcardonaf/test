{"job":{"components":{"877679":{"id":877679,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-694,"y":-227,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[877685,877687,877686],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"877680":{"id":877680,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-455,"y":-105,"width":32,"height":32,"inputConnectorIDs":[877684],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"upload_attachement_to_S3"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Udating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nimport time, imaplib\nimport email.header\nimport os\nimport sys\nimport datetime\nimport boto3\n\nimap_server = \"imap.outlook.com\"\nemailaddress = \"GDPRConsent@geniussports.com\"\npassword = \"Dafne01@\"\n\n# Connect to the server\nprint('Connecting to ' + imap_server)\nemail_conn = imaplib.IMAP4_SSL(imap_server)\n\n# Login to our account\nlogin_status, login_detail = email_conn.login(emailaddress, password)\n\nprint(login_status, login_detail)\n\nif login_status != 'OK':\n    print 'log in error : ', login_detail, login_status\n\ns3 = boto3.resource('s3')\ns3_client = boto3.client('s3')\ns3bucketname = src_url\n#s3key = 'test/'\n\n# boxList = email_conn.list()\n# print(boxList)\n\nemail_conn.select('Inbox')\n# 3011 , 3012\neid = email_id\nresult, email_data = email_conn.fetch(eid, '(RFC822)')\nmsg = email.message_from_string(email_data[0][1])\n\nfor part in msg.walk():\n    # print(part)\n    # print  part.get_content_maintype()  , 'file name : ' ,part.get_filename() ,bool(part.get_filename())\n    fname = part.get_filename()\n    if fname == attachments :\n        print 'email id :',eid ,'filename: ' ,fname\n        s3key = src_folder.lower()\n        s3path =  s3key +'/'+ fname.lower()\n        if s3key is None:  s3path = fname.lower()\n        s3_client.put_object(Body=(part.get_payload(decode=True)), Bucket=s3bucketname, Key=s3path)\n\n\nemail_conn.close()\nemail_conn.logout()\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"877681":{"id":877681,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-352,"y":-286,"width":32,"height":32,"inputConnectorIDs":[877685],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of upload_attachement_to_S3"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Udating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nimport time, imaplib\nimport email.header\nimport os\nimport sys\nimport datetime\nimport boto3\n\nimap_server = \"imap.outlook.com\"\nemailaddress = \"GDPRConsent@geniussports.com\"\npassword = \"Dafne01@\"\n\n# Connect to the server\nprint('Connecting to ' + imap_server)\nemail_conn = imaplib.IMAP4_SSL(imap_server)\n\n# Login to our account\nlogin_status, login_detail = email_conn.login(emailaddress, password)\n\nprint(login_status, login_detail)\n\nif login_status != 'OK':\n    print 'log in error : ', login_detail, login_status\n\ns3 = boto3.resource('s3')\ns3bucketname = src_url\n#s3key = 'test/'\n\n# boxList = email_conn.list()\n# print(boxList)\n\nemail_conn.select('Inbox')\n# 3011 , 3012\neid = email_id\nresult, email_data = email_conn.fetch(eid, '(RFC822)')\nmsg = email.message_from_string(email_data[0][1])\n\nfor part in msg.walk():\n    # print(part)\n    # print  part.get_content_maintype()  , 'file name : ' ,part.get_filename() ,bool(part.get_filename())\n    fname = part.get_filename()\n    if fname == attachments :\n        print 'email id :',eid ,'filename: ' ,fname\n        #print fname.split('_')[0]\n        #s3key = (fname.split('_')[0]).lower() +'/'\n        s3path =  fname.lower()\n        s3object = s3.Object(s3bucketname, s3path)\n        s3object.put(Body=(part.get_payload(decode=True)))\n        # print(s3path)\n        # fp = open(filePath, 'wb')\n        # fp.write(part.get_payload(decode=True))\n\nemail_conn.close()\nemail_conn.logout()\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"877682":{"id":877682,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-259,"y":-185,"width":32,"height":32,"inputConnectorIDs":[877687],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of upload_attachement_to_S3 (1)"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Udating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nimport time, imaplib\nimport email.header\nimport os\nimport sys\nimport datetime\nimport boto3\n\nimap_server = \"imap.outlook.com\"\nemailaddress = \"GDPRConsent@geniussports.com\"\npassword = \"Dafne01@\"\n\n# Connect to the server\nprint('Connecting to ' + imap_server)\nemail_conn = imaplib.IMAP4_SSL(imap_server)\n\n# Login to our account\nlogin_status, login_detail = email_conn.login(emailaddress, password)\n\nprint(login_status, login_detail)\n\nif login_status != 'OK':\n    print 'log in error : ', login_detail, login_status\n\ns3 = boto3.resource('s3')\ns3bucketname = src_url\n#s3key = 'test/'\n\n# boxList = email_conn.list()\n# print(boxList)\n\nemail_conn.select('Inbox')\n# 3011 , 3012\neid = email_id\nresult, email_data = email_conn.fetch(eid, '(RFC822)')\nmsg = email.message_from_string(email_data[0][1])\n\nfor part in msg.walk():\n    # print(part)\n    # print  part.get_content_maintype()  , 'file name : ' ,part.get_filename() ,bool(part.get_filename())\n    fname = part.get_filename()\n    if fname == attachments :\n        print 'email id :',eid ,'filename: ' ,fname\n        #print fname.split('_')[0]\n        s3key = (fname.split('_')[0]).lower() \n        s3path =  s3key +'/'+ fname.lower()\n        if s3key is None:  s3path = fname.lower()\n        s3object = s3.Object(s3bucketname, s3path)\n        s3object.put(Body=(part.get_payload(decode=True)))\n        # print(s3path)\n        # fp = open(filePath, 'wb')\n        # fp.write(part.get_payload(decode=True))\n\nemail_conn.close()\nemail_conn.logout()\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"877683":{"id":877683,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-688,"y":-107,"width":32,"height":32,"inputConnectorIDs":[877686],"outputSuccessConnectorIDs":[877684],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Create folder in S3 if it does not exists"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\ns3_client = boto3.client('s3')\ns3 = boto3.resource('s3')\ns3_bucketname =src_url\ns3_foldername = src_folder.lower() +'/'\ntry:\n  s3_client.head_object(Bucket= s3_bucketname, Key=s3_foldername)\n  print \" folder Exists!\"\nexcept:\n  print 'creating folder in S3....'\n  s3_client.put_object(Bucket=s3_bucketname,Body='',Key=s3_foldername)\n\n  "}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"877684":{"id":877684,"sourceID":877683,"targetID":877680}},"failureConnectors":{},"unconditionalConnectors":{"877685":{"id":877685,"sourceID":877679,"targetID":877681},"877687":{"id":877687,"sourceID":877679,"targetID":877682},"877686":{"id":877686,"sourceID":877679,"targetID":877683}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"canUndo":false,"undoCommand":"","undoCreated":-1,"canRedo":false,"redoCommand":"","redoCreated":-1,"notes":{},"variables":{"s3_bucket":{"definition":{"name":"s3_bucket","type":"TEXT","scope":"BRANCH","description":null,"visibility":"PUBLIC"},"value":"geniussports-gdprconsent-bi-prod"}},"grids":{}},"info":{"name":"GDPR_download_attachement_to_s3","description":" ","type":"ORCHESTRATION"}}